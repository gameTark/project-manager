interface Node {
  # The ID of the object.
  id: ID!
}

enum FileType {
  FILE
  DIRECTORY
}

type File {
  type: FileType!
  name: String!
  path: String!
  updatedAt: Float!
  size: Int!
  ls: [File!]!
}

type Icon implements Node {
  id: ID!
  srcPath: String!
  name: String!
}

# 引数とか追加したい
type Software implements Node {
  id: ID!
  path: String!
  icon: Icon!
  args: [String]!
}

# paginationを考えておいたほうが良い気もする
type Tag implements Node {
  id: ID!
  name: String!
  color: String!
  projects: [Project]!
}

type Project implements Node {
  id: ID!
  title: String!
  description: String
  sort: Int
  updatedAt: Float!
  icon: Icon!
  tags: [Tag]!
  contents: [Content]!
}

enum ContentType {
  Directory
  File
  Software
  Link
}

type Content implements Node {
  contentType: ContentType!
  id: ID!
  name: String!
  path: String!
  updatedAt: Float!
  size: Float!

  project: Project
  icon: Icon!
}

type Query {
  projects: [Project]!
  icons: [Icon]!
  getProject(id: ID!): Project
  file(path: String!): File
}

type Mutation {
  insertProject(name: String!, iconId: ID!, description: String, sort: String): Project
  updateProject(name: String, iconId: ID, description: String, sort: String id: ID!): Project
  deleteProject(id: ID!): Project

  insertTag(name: String!, color: String): Tag
  updateTag(name: String, color: String, id: ID!): Tag
  deleteTag(id: ID!): Tag
  registTag(tagId: ID!, projectId: ID!): Boolean

  insertIcon(name: String!, srcPath: String!): Icon
  updateIcon(name: String, srcPath: String, id: ID!): Icon
  deleteIcon(id: ID!): Icon

  insertContent(name: String!, path: String!, projectId: ID!, icon: ID): Content
  updateContent(name: String, path: String, projectId: ID!, icon: ID, id: ID!): Content
  deleteContent(id: ID!): Content
}
